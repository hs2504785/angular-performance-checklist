{"ast":null,"code":"import { createSelector } from '@ngrx/store';\nimport { extractRouteParams } from '../../shared/router.utils';\nimport { computeScore } from '../../state/app-state.utils';\nimport { AppSelectors } from '../../state/app.selectors';\nexport var ProjectsSelectors;\n(function (ProjectsSelectors) {\n  ProjectsSelectors.getProjectEntities = createSelector(AppSelectors.getProjectsState, projects => projects.entities);\n  ProjectsSelectors.getSelectedProjectId = createSelector(AppSelectors.getRouterState, routerState => {\n    const {\n      project\n    } = extractRouteParams(routerState.root, 1);\n    return project;\n  });\n  ProjectsSelectors.getSelectedProject = createSelector(ProjectsSelectors.getProjectEntities, ProjectsSelectors.getSelectedProjectId, (projectEntities, projectId) => {\n    const emptyProject = {};\n    if (!projectEntities) {\n      return emptyProject;\n    }\n    return projectEntities[projectId] || emptyProject;\n  });\n  ProjectsSelectors.getProjectItems = createSelector(ProjectsSelectors.getSelectedProject, project => {\n    return project.items || {};\n  });\n  ProjectsSelectors.getDisabledCategories = createSelector(ProjectsSelectors.getSelectedProject, project => {\n    return project.disabledCategories || {};\n  });\n  ProjectsSelectors.getFavoriteEntities = createSelector(ProjectsSelectors.getSelectedProject, project => {\n    return project.favorites || {};\n  });\n  ProjectsSelectors.getProjectsScores = createSelector(ProjectsSelectors.getProjectEntities, AppSelectors.getCategoryEntities, (projectEntities, categoryEntities) => {\n    return Object.keys(projectEntities).reduce((scores, projectId) => {\n      const disabledCategories = projectEntities[projectId].disabledCategories;\n      const activeCategories = Object.keys(categoryEntities).filter(categoryId => !disabledCategories[categoryId]);\n      const categoryScore = activeCategories.reduce((score, categoryId) => {\n        return score + computeScore(categoryEntities[categoryId].items, projectEntities[projectId].items);\n      }, 0);\n      scores[projectId] = parseFloat((categoryScore / activeCategories.length).toFixed(2));\n      return scores;\n    }, {});\n  });\n  ProjectsSelectors.getProjects = createSelector(ProjectsSelectors.getProjectEntities, ProjectsSelectors.getProjectsScores, (projectEntities, projectScores) => {\n    const addScore = project => {\n      return Object.assign(Object.assign({}, project), {\n        score: projectScores[project.id]\n      });\n    };\n    return Object.values(projectEntities).map(addScore).sort((a, b) => b.creationTime - a.creationTime);\n  });\n  ProjectsSelectors.getProjectById = id => {\n    return createSelector(ProjectsSelectors.getProjectEntities, projectEntities => projectEntities[id]);\n  };\n})(ProjectsSelectors || (ProjectsSelectors = {}));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}