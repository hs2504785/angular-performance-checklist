{"ast":null,"code":"import { select } from '@ngrx/store';\nimport * as fuzzysort from 'fuzzysort';\nimport { merge, of, zip } from 'rxjs';\nimport { filter, switchMap, take } from 'rxjs/operators';\nimport { ProjectsActionTypes } from '../../projects/state/projects.actions';\nimport { ProjectsSelectors } from '../../projects/state/projects.selectors';\nimport { AppSelectors } from '../../state/app.selectors';\nimport { ChecklistSelectors } from '../state/checklist.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let SearchService = /*#__PURE__*/(() => {\n  class SearchService {\n    constructor(store, actions) {\n      this.store = store;\n      this.actions = actions;\n      this.options = {\n        key: 'value.title',\n        allowTypo: false,\n        limit: 100,\n        threshold: -10000\n      };\n      const actions$ = this.actions.pipe(filter(action => action.type === ProjectsActionTypes.TOGGLE_CATEGORY));\n      merge(actions$, of('INIT INDEX')).pipe(switchMap(_ => this.getStoreData())).subscribe(([categories, items, projectId]) => {\n        this.index = this.createIndex(categories, items, projectId);\n      });\n    }\n    search(term) {\n      return of(fuzzysort.go(term, this.index, this.options));\n    }\n    createIndex(categoryEntities, itemEntities, projectId) {\n      const categories = Object.values(categoryEntities).map(category => this.compileCategory(category, projectId));\n      const items = categories.reduce(this.compileCategoryItems(itemEntities, projectId), []);\n      return [...categories, ...items];\n    }\n    getStoreData() {\n      return zip(this.store.pipe(select(ChecklistSelectors.getActiveCategoryEntities)), this.store.pipe(select(AppSelectors.getItemEntities)), this.store.pipe(select(ProjectsSelectors.getSelectedProjectId))).pipe(take(1));\n    }\n    compileCategory(category, projectId) {\n      return {\n        value: category,\n        link: `${this.getBaseLink(projectId)}/${category.slug}`\n      };\n    }\n    compileCategoryItems(itemEntities, projectId) {\n      return (acc, category) => {\n        return acc.concat(category.value.items.map(itemId => {\n          const checklistItem = itemEntities[itemId];\n          return {\n            value: checklistItem,\n            link: `${this.getBaseLink(projectId)}/${checklistItem.category}/${checklistItem.id}`\n          };\n        }));\n      };\n    }\n    getBaseLink(projectId) {\n      return `/${projectId}/checklist`;\n    }\n  }\n  SearchService.ɵfac = function SearchService_Factory(t) {\n    return new (t || SearchService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i1.ActionsSubject));\n  };\n  SearchService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SearchService,\n    factory: SearchService.ɵfac\n  });\n  return SearchService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}