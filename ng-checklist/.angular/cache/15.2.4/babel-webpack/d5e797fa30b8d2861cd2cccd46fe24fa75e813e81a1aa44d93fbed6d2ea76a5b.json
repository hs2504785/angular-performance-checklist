{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { createSelector } from '@ngrx/store';\nimport { ProjectsSelectors } from '../../projects/state/projects.selectors';\nimport { extractRouteParams } from '../../shared/router.utils';\nimport { calculatePercentage, computeScore, createChecklistItem, filterItems } from '../../state/app-state.utils';\nimport { AppSelectors } from '../../state/app.selectors';\nimport * as _ from 'lodash';\nexport var ChecklistSelectors;\n(function (ChecklistSelectors) {\n  ChecklistSelectors.getFavoritesFilter = createSelector(AppSelectors.getChecklistState, checklist => checklist.filter.favorites);\n  ChecklistSelectors.getCategoriesFilter = createSelector(AppSelectors.getChecklistState, checklist => checklist.filter.categories);\n  ChecklistSelectors.getEditMode = createSelector(AppSelectors.getChecklistState, checklist => checklist.editMode);\n  ChecklistSelectors.getScores = createSelector(AppSelectors.getCategoryEntities, ProjectsSelectors.getProjectItems, (categories, items) => {\n    return Object.keys(categories).reduce((acc, categoryId) => {\n      acc[categoryId] = computeScore(categories[categoryId].items, items);\n      return acc;\n    }, {});\n  });\n  ChecklistSelectors.getActiveCategoryEntities = createSelector(AppSelectors.getCategoryEntities, ProjectsSelectors.getDisabledCategories, (categoryEntities, disabledCategories) => {\n    return Object.keys(disabledCategories).reduce((acc, disabledCategory) => {\n      const _a = acc,\n        _b = disabledCategory,\n        removedCategory = _a[_b],\n        rest = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return rest;\n    }, categoryEntities);\n  });\n  ChecklistSelectors.getAllCategories = createSelector(AppSelectors.getCategoryEntities, AppSelectors.getItemEntities, ProjectsSelectors.getDisabledCategories, ChecklistSelectors.getScores, (categories, items, disabledCategories, scores) => {\n    return Object.keys(categories).map(categoryId => {\n      const category = categories[categoryId];\n      const categoryItems = category.items.map(itemId => items[itemId]);\n      return Object.assign(Object.assign({}, category), {\n        score: scores[categoryId],\n        enabled: !disabledCategories[category.slug],\n        items: categoryItems\n      });\n    });\n  });\n  ChecklistSelectors.getActiveCategories = createSelector(ChecklistSelectors.getAllCategories, categories => {\n    return categories.filter(category => category.enabled);\n  });\n  ChecklistSelectors.getSelectedCategory = createSelector(AppSelectors.getRouterState, AppSelectors.getCategoryEntities, ProjectsSelectors.getDisabledCategories, ChecklistSelectors.getScores, (routerState, categoryEntities, disabledCategories, scores) => {\n    const {\n      category\n    } = extractRouteParams(routerState.root, 4);\n    let selectedCategory = null;\n    if (category) {\n      selectedCategory = Object.assign(Object.assign({}, categoryEntities[category]), {\n        score: scores[category],\n        enabled: !disabledCategories[category]\n      });\n    }\n    return selectedCategory;\n  });\n  ChecklistSelectors.getFavoritesFromSelectedCategory = createSelector(ProjectsSelectors.getSelectedProject, ChecklistSelectors.getSelectedCategory, (project, selectedCategory) => {\n    if (selectedCategory) {\n      return project.favorites;\n    }\n    return {};\n  });\n  ChecklistSelectors.getItemsFromSelectedCategory = createSelector(AppSelectors.getItemEntities, ChecklistSelectors.getSelectedCategory, ChecklistSelectors.getCategoriesFilter, ProjectsSelectors.getProjectItems, ChecklistSelectors.getFavoritesFromSelectedCategory, (items, selectedCategory, filter, projectItems, favorites) => {\n    if (selectedCategory) {\n      return filterItems(selectedCategory.items.map(id => createChecklistItem(id, items, projectItems, favorites)), filter);\n    }\n    return null;\n  });\n  ChecklistSelectors.getSelectedItem = createSelector(ChecklistSelectors.getSelectedCategory, AppSelectors.getItemEntities, AppSelectors.getRouterState, ProjectsSelectors.getProjectItems, ChecklistSelectors.getFavoritesFromSelectedCategory, (selectedCategory, items, routerState, projectItems, favorites) => {\n    const {\n      item: id\n    } = extractRouteParams(routerState.root, 4);\n    if (selectedCategory && id) {\n      return createChecklistItem(id, items, projectItems, favorites);\n    }\n    return null;\n  });\n  ChecklistSelectors.getFavoriteGroupedByCategory = createSelector(ProjectsSelectors.getFavoriteEntities, AppSelectors.getItemEntities, ProjectsSelectors.getProjectItems, (favorites, itemEntities, projectItems) => {\n    const items = Object.keys(favorites).map(itemId => createChecklistItem(itemId, itemEntities, projectItems, favorites));\n    return _.groupBy(items, 'category');\n  });\n  ChecklistSelectors.getFavorites = createSelector(ChecklistSelectors.getFavoriteGroupedByCategory, AppSelectors.getCategoryEntities, (favoriteGroups, categories) => {\n    return Object.keys(favoriteGroups).reduce((acc, categoryId) => {\n      acc.push({\n        category: categories[categoryId],\n        items: favoriteGroups[categoryId]\n      });\n      return acc;\n    }, []);\n  });\n  ChecklistSelectors.getFavoriteEntitiesByCategory = id => {\n    return createSelector(ChecklistSelectors.getFavoriteGroupedByCategory, categories => categories[id] || {});\n  };\n  ChecklistSelectors.getFilteredFavorites = createSelector(ChecklistSelectors.getFavorites, ChecklistSelectors.getFavoritesFilter, (favorites, filter) => {\n    return favorites.map(favorite => Object.assign(Object.assign({}, favorite), {\n      items: filterItems(favorite.items, filter)\n    }));\n  });\n  ChecklistSelectors.getFavoritesScore = createSelector(ChecklistSelectors.getFavorites, favorites => {\n    if (favorites.length) {\n      const score = favorites.reduce((acc, category) => {\n        acc.checkedItems += category.items.filter(item => item.checked).length;\n        acc.totalItems += category.items.length;\n        return acc;\n      }, {\n        checkedItems: 0,\n        totalItems: 0\n      });\n      return calculatePercentage(score.checkedItems, score.totalItems);\n    }\n    return 0;\n  });\n  ChecklistSelectors.getFavoritesCount = createSelector(ChecklistSelectors.getFavorites, favorites => {\n    return favorites.reduce((acc, category) => {\n      return acc + category.items.length;\n    }, 0);\n  });\n  ChecklistSelectors.getBreadcrumb = createSelector(ChecklistSelectors.getSelectedCategory, ChecklistSelectors.getSelectedItem, (category, item) => {\n    const breadcrumb = [];\n    if (category) {\n      breadcrumb.push(category);\n    }\n    if (item) {\n      breadcrumb.push(item);\n    }\n    return breadcrumb;\n  });\n})(ChecklistSelectors || (ChecklistSelectors = {}));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}