{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { createNewProject, toggleEntity, toggleManny } from './project-state.utils';\nimport { ProjectsActionTypes } from './projects.actions';\nconst DEFAULT_PROJECT = {\n  default: createNewProject('default')\n};\nfunction projectsStateReducer(state, action) {\n  switch (action.type) {\n    case ProjectsActionTypes.TOGGLE_FAVORITE:\n    case ProjectsActionTypes.TOGGLE_CATEGORY:\n    case ProjectsActionTypes.ADD_PROJECT:\n    case ProjectsActionTypes.DELETE_PROJECT:\n    case ProjectsActionTypes.EDIT_PROJECT:\n    case ProjectsActionTypes.TOGGLE_ITEM:\n    case ProjectsActionTypes.CHECK_ALL:\n    case ProjectsActionTypes.UNCHECK_ALL:\n    case ProjectsActionTypes.TOGGLE_ALL_FAVORITES:\n      return Object.assign(Object.assign({}, state), {\n        entities: projectEntitiesReducer(state, action)\n      });\n    case ProjectsActionTypes.SELECT_PROJECT:\n      return Object.assign(Object.assign({}, state), {\n        selectedProjectId: action.payload\n      });\n    default:\n      return state;\n  }\n}\nexport const projectEntitiesReducer = (state, action) => {\n  const selectedProject = state.selectedProjectId;\n  const entities = state.entities;\n  switch (action.type) {\n    case ProjectsActionTypes.EDIT_PROJECT:\n      const {\n        current,\n        updated\n      } = action.payload;\n      const _a = state.entities,\n        _b = current.id,\n        currentProject = _a[_b],\n        projects = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      const updatedProject = Object.assign(Object.assign({}, current), updated);\n      return Object.assign(Object.assign({}, projects), {\n        [updatedProject.id]: updatedProject\n      });\n    case ProjectsActionTypes.ADD_PROJECT:\n      const project = action.payload;\n      return Object.assign(Object.assign({}, state.entities), {\n        [project.id]: createNewProject(project.id, project.name)\n      });\n    case ProjectsActionTypes.DELETE_PROJECT:\n      const _c = state.entities,\n        _d = action.payload,\n        deletedProject = _c[_d],\n        updatedEntities = __rest(_c, [typeof _d === \"symbol\" ? _d : _d + \"\"]);\n      return Object.assign({}, updatedEntities);\n    case ProjectsActionTypes.CHECK_ALL:\n    case ProjectsActionTypes.UNCHECK_ALL:\n    case ProjectsActionTypes.TOGGLE_ITEM:\n    case ProjectsActionTypes.TOGGLE_CATEGORY:\n    case ProjectsActionTypes.TOGGLE_FAVORITE:\n    case ProjectsActionTypes.TOGGLE_ALL_FAVORITES:\n      return Object.assign(Object.assign({}, entities), {\n        [selectedProject]: projectReducer(entities[selectedProject], action)\n      });\n    default:\n      return entities;\n  }\n};\nexport const projectReducer = (project, action) => {\n  switch (action.type) {\n    case ProjectsActionTypes.TOGGLE_FAVORITE:\n    case ProjectsActionTypes.TOGGLE_ALL_FAVORITES:\n      return Object.assign(Object.assign({}, project), {\n        favorites: favoritesReducer(project.favorites, action)\n      });\n    case ProjectsActionTypes.UNCHECK_ALL:\n      return Object.assign(Object.assign({}, project), {\n        items: toggleManny(action.payload.items, item => item, {\n          initialValue: project.items,\n          value: false\n        })\n      });\n    case ProjectsActionTypes.CHECK_ALL:\n      return Object.assign(Object.assign({}, project), {\n        items: toggleManny(action.payload.items, item => item, {\n          initialValue: project.items,\n          value: true\n        })\n      });\n    case ProjectsActionTypes.TOGGLE_ITEM:\n      return Object.assign(Object.assign({}, project), {\n        items: toggleEntity(project.items, action.payload.id)\n      });\n    case ProjectsActionTypes.TOGGLE_CATEGORY:\n      return Object.assign(Object.assign({}, project), {\n        disabledCategories: toggleEntity(project.disabledCategories, action.payload)\n      });\n    default:\n      return project;\n  }\n};\nexport const favoritesReducer = (favoriteEntities, action) => {\n  switch (action.type) {\n    case ProjectsActionTypes.TOGGLE_ALL_FAVORITES:\n      const updatedFavorites = Object.assign({}, favoriteEntities);\n      action.payload.forEach(item => {\n        delete updatedFavorites[item.id];\n      });\n      return updatedFavorites;\n    case ProjectsActionTypes.TOGGLE_FAVORITE:\n      const {\n        id: itemId\n      } = action.payload;\n      return toggleEntity(favoriteEntities, itemId);\n    default:\n      return favoriteEntities;\n  }\n};\nexport const projectsInitReducer = stateReducer => {\n  return (state, action) => {\n    let newState = state;\n    if (!state || !Object.keys(state).length) {\n      newState = {\n        entities: DEFAULT_PROJECT,\n        selectedProjectId: null\n      };\n    }\n    const nextState = stateReducer(newState, action);\n    return nextState;\n  };\n};\nexport function projectsReducer(state, action) {\n  const rootReducer = projectsInitReducer(projectsStateReducer);\n  return rootReducer(state, action);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}